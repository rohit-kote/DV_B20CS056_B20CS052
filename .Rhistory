library(shiny); runApp('project.R')
runApp('project.R')
runApp('project.R')
library(shiny); runApp('project.R')
runApp('project.R')
install.packages("janitor")
library(shiny); runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
library(shiny); runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('play_pattern.R')
runApp('play_pattern.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('play_pattern.R')
runApp('play_pattern.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('play_pattern.R')
runApp('pitch_Shots.R')
install.packages("MatchReport")
runApp('radar.R')
runApp('radar.R')
runApp('radar.R')
runApp('radar.R')
runApp('radar.R')
runApp('pitch_Shots.R')
runApp('pitch_Shots.R')
runApp('pitch_Shots.R')
runApp('pitch_Shots.R')
runApp('pitch_Shots.R')
runApp('pitch_Shots.R')
library(shiny); runApp('pitch_Shots.R')
runApp('ronaldo_plots.R')
runApp('scatter.R')
runApp('scatter.R')
runApp('ronaldo_plots.R')
runApp('scatter.R')
runApp('play_pattern.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
library(shiny); runApp('ronaldo_plots.R')
runApp('cris.R')
runApp('ronaldo_plots.R')
runApp('cris.R')
library(shiny); runApp('ronaldo_plots.R')
runApp('project.R')
runApp('ronaldo_plots.R')
runApp('ronaldo_plots.R')
runApp('ronaldo_plots.R')
runApp('messi_plots.R')
library(shiny); runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('ronaldo_plots.R')
runApp('ronaldo_plots.R')
library(shiny); runApp('ronaldo_plots.R')
runApp('ronaldo_plots.R')
runApp('ronaldo_plots.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('project.R')
runApp('ronaldo_plots.R')
runApp('ronaldo_plots.R')
install.packages("plotrix")
runApp('ronaldo_plots.R')
runApp('project.R')
runApp('project.R')
library(shiny); runApp('project.R')
library(shiny); runApp('project.R')
library(shiny); runApp('messi_plots.R')
runApp('messi_plots.R')
runApp('project.R')
loadData <- function() {
season_data <- read.csv("D:/Btech/year4_sem2/Data_visulisation/project/season_wise_meta_data.csv")
shots_data <- read.csv("D:/Btech/year4_sem2/Data_visulisation/project/shots_df.csv")
return(list(season_data = season_data, shots_data = shots_data))
}
library(ggplot2)
generatePlot <- function(data, plotType) {
season_data <- data$season_data
shots_data <- data$shots_data
p <- NULL
if (input$plotType == "performance") {
# Messi's performance plot
p <- ggplot(data = season_data, aes(x = as.factor(season))) +
geom_line(aes(y = goals, colour = "Goals")) +
geom_line(aes(y = assists, colour = "Assists")) +
geom_line(aes(y = xG, colour = "Expected Goals (xG)")) +
labs(title = "Messi's Performance Over Seasons", x = "Season", y = "Count") +
scale_color_manual(values = c("Goals" = "blue", "Assists" = "green", "Expected Goals (xG)" = "red"))
} else if (input$plotType == "cards") {
p <- ggplot(data = season_data, aes(x = as.factor(season))) +
geom_bar(aes(y = yellow, fill = "Yellow Cards"), stat = "identity") +
geom_bar(aes(y = red, fill = "Red Cards"), position = "dodge", stat = "identity") +
labs(title = "Yellow and Red Cards per Season", x = "Season", y = "Number of Cards") +
scale_fill_manual(values = c("Yellow Cards" = "yellow", "Red Cards" = "red"))
} else if (input$plotType == "xg_goals") {
p <- ggplot(data = season_data, aes(x = xG, y = goals)) +
geom_point(aes(color = as.factor(season)), size = 3) +
geom_smooth(method = "lm") +
labs(title = "Relationship Between Expected Goals and Actual Goals", x = "Expected Goals (xG)", y = "Actual Goals")
} else if (input$plotType == "shot_outcomes") {
p <- ggplot(data = shots_data, aes(x = result)) +
geom_bar(aes(fill = result)) +
labs(title = "Distribution of Shot Outcomes", x = "Shot Outcome", y = "Count")
} else if (input$plotType == "shot_locations") {
p <- ggplot(data = shots_data, aes(x = X, y = Y)) +
geom_bin2d(bins = 30, alpha = 0.5) +
scale_fill_viridis_c() +
labs(title = "Heat Map of Shot Locations", x = "Field X Coordinate", y = "Field Y Coordinate")
} else if (input$plotType == "boxplot") {
messi_data$Goals_Scored <- as.numeric(sub(":.*", "", messi_data$At_score))
p <- ggplot(data = messi_data, aes(x = Competition, y = Goals_Scored)) +
geom_boxplot(fill = "yellow") +
labs(x = "Competition", y = "Goals Scored", title = "Distribution of Goals Scored per Competition (Boxplot)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
} else if (input$plotType == "goal_involvement") {
messi_data$Goals_Scored <- as.numeric(sub(":.*", "", messi_data$At_score))
messi_data$Goal_assist <- as.numeric(messi_data$Goal_assist)
messi_data$Goal_assist[is.na(messi_data$Goal_assist)] <- 0
messi_data$Goal_Involvement <- messi_data$Goals_Scored + messi_data$Goal_assist
total_goal_involvement_per_season <- aggregate(messi_data$Goal_Involvement, by=list(messi_data$Season), FUN=sum)
p <- ggplot(data = total_goal_involvement_per_season, aes(x = Group.1, y = x)) +
geom_line() +
geom_point() +
labs(x = "Season", y = "Total Goal Involvement", title = "Trend of Total Goal Involvement Over Seasons") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else if (input$plotType == "goals_per_club") {
p <- ggplot(data = messi_data, aes(x = Club, fill = Club)) +
geom_bar(stat = "count") +
labs(x = "Club", y = "Goals", title = "Goals per Club") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else if (input$plotType == "goals_per_minute") {
# Data manipulation for density plot
messi_data$Minute <- as.character(messi_data$Minute)
messi_data$Minute <- gsub("^45\\+.*", "45.5", messi_data$Minute)
messi_data$Minute <- gsub("^90\\+.*", "90.5", messi_data$Minute)
messi_data$Minute <- gsub("^120\\+.*", "120.5", messi_data$Minute)
messi_data$Minute <- as.numeric(messi_data$Minute)
p <- ggplot(messi_data, aes(x = Minute)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Density of Goals per Minute",
x = "Minute of the Game",
y = "Density")
} else if (input$plotType == "goals_per_opponent") {
# Aggregate data
opponent_data <- messi_data %>%
group_by(Opponent) %>%
summarise(Goals = n(), .groups = 'drop') %>%
arrange(desc(Goals))
# Plot all data but focus initially on the first 15
p <- ggplot(opponent_data, aes(x = reorder(Opponent, -Goals), y = Goals, fill = Opponent)) +
geom_bar(stat = "identity") +
labs(title = "Goals per Opponent", x = "Opponent", y = "Number of Goals") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none") +  # Remove the legend
coord_cartesian(xlim = c(1, 15), clip = "off")  # Limit view to first 15 but allow panning
# Make the plot interactive with Plotly
p <- ggplotly(p, tooltip = "y")
} else if (input$plotType == "goals_assist") {
# Prepare data: Count assists and sort by frequency
assist_data <- messi_data %>%
filter(!is.na(Goal_assist)) %>%
group_by(Goal_assist) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
# Create the plot without a legend and allowing panning
p <- ggplot(assist_data, aes(x = reorder(Goal_assist, -Count), y = Count, fill = Goal_assist)) +
geom_bar(stat = "identity") +
labs(title = "Goals Assist", x = "Number of Assists", y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none") +
coord_cartesian(xlim = c(1, 15), clip = "off")  # Limit view to first 15 but allow panning
# Make the plot interactive with Plotly
p <- ggplotly(p, tooltip = "y")
} else if (input$plotType == "goals_position") {
# Calculate the count of goals scored per playing position
goals_per_position <- messi_data$Playing_Position %>% table()
# Remove NaN values
goals_per_position <- goals_per_position[!is.nan(as.numeric(names(goals_per_position)))]
# Create a pie chart
pie_chart <- plot_ly(labels = names(goals_per_position), values = as.numeric(goals_per_position), type = 'pie',
marker = list(colors = RColorBrewer::brewer.pal(length(goals_per_position), "Set3")),
textinfo = 'percent+label')
return(pie_chart)
} else if (input$plotType == "goals_position_donut") {
# Calculate the count of goals scored per playing position
goals_per_position <- messi_data$Type %>% table()
# Remove NaN values
goals_per_position <- goals_per_position[!is.nan(as.numeric(names(goals_per_position))) &
names(goals_per_position) != "" &
as.numeric(goals_per_position) != 0]
# Create a donut chart
donut_chart <- plot_ly(labels = names(goals_per_position), values = as.numeric(goals_per_position), type = 'pie',
marker = list(colors = RColorBrewer::brewer.pal(length(goals_per_position), "Set3")),
hole = 0.6,
textinfo = 'percent+label')
return(donut_chart)
}
return(p)
}
loadData <- function() {
season_data <- read.csv("D:/Btech/year4_sem2/Data_visulisation/project/season_wise_meta_data.csv")
shots_data <- read.csv("D:/Btech/year4_sem2/Data_visulisation/project/shots_df.csv")
return(list(season_data = season_data, shots_data = shots_data))
}
library(ggplot2)
generatePlot <- function(data, plotType) {
season_data <- data$season_data
shots_data <- data$shots_data
p <- NULL
if (input$plotType == "performance") {
# Messi's performance plot
p <- ggplot(data = season_data, aes(x = as.factor(season))) +
geom_line(aes(y = goals, colour = "Goals")) +
geom_line(aes(y = assists, colour = "Assists")) +
geom_line(aes(y = xG, colour = "Expected Goals (xG)")) +
labs(title = "Messi's Performance Over Seasons", x = "Season", y = "Count") +
scale_color_manual(values = c("Goals" = "blue", "Assists" = "green", "Expected Goals (xG)" = "red"))
} else if (input$plotType == "cards") {
p <- ggplot(data = season_data, aes(x = as.factor(season))) +
geom_bar(aes(y = yellow, fill = "Yellow Cards"), stat = "identity") +
geom_bar(aes(y = red, fill = "Red Cards"), position = "dodge", stat = "identity") +
labs(title = "Yellow and Red Cards per Season", x = "Season", y = "Number of Cards") +
scale_fill_manual(values = c("Yellow Cards" = "yellow", "Red Cards" = "red"))
} else if (input$plotType == "xg_goals") {
p <- ggplot(data = season_data, aes(x = xG, y = goals)) +
geom_point(aes(color = as.factor(season)), size = 3) +
geom_smooth(method = "lm") +
labs(title = "Relationship Between Expected Goals and Actual Goals", x = "Expected Goals (xG)", y = "Actual Goals")
} else if (input$plotType == "shot_outcomes") {
p <- ggplot(data = shots_data, aes(x = result)) +
geom_bar(aes(fill = result)) +
labs(title = "Distribution of Shot Outcomes", x = "Shot Outcome", y = "Count")
} else if (input$plotType == "shot_locations") {
p <- ggplot(data = shots_data, aes(x = X, y = Y)) +
geom_bin2d(bins = 30, alpha = 0.5) +
scale_fill_viridis_c() +
labs(title = "Heat Map of Shot Locations", x = "Field X Coordinate", y = "Field Y Coordinate")
} else if (input$plotType == "boxplot") {
messi_data$Goals_Scored <- as.numeric(sub(":.*", "", messi_data$At_score))
p <- ggplot(data = messi_data, aes(x = Competition, y = Goals_Scored)) +
geom_boxplot(fill = "yellow") +
labs(x = "Competition", y = "Goals Scored", title = "Distribution of Goals Scored per Competition (Boxplot)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
} else if (input$plotType == "goal_involvement") {
messi_data$Goals_Scored <- as.numeric(sub(":.*", "", messi_data$At_score))
messi_data$Goal_assist <- as.numeric(messi_data$Goal_assist)
messi_data$Goal_assist[is.na(messi_data$Goal_assist)] <- 0
messi_data$Goal_Involvement <- messi_data$Goals_Scored + messi_data$Goal_assist
total_goal_involvement_per_season <- aggregate(messi_data$Goal_Involvement, by=list(messi_data$Season), FUN=sum)
p <- ggplot(data = total_goal_involvement_per_season, aes(x = Group.1, y = x)) +
geom_line() +
geom_point() +
labs(x = "Season", y = "Total Goal Involvement", title = "Trend of Total Goal Involvement Over Seasons") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else if (input$plotType == "goals_per_club") {
p <- ggplot(data = messi_data, aes(x = Club, fill = Club)) +
geom_bar(stat = "count") +
labs(x = "Club", y = "Goals", title = "Goals per Club") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else if (input$plotType == "goals_per_minute") {
# Data manipulation for density plot
messi_data$Minute <- as.character(messi_data$Minute)
messi_data$Minute <- gsub("^45\\+.*", "45.5", messi_data$Minute)
messi_data$Minute <- gsub("^90\\+.*", "90.5", messi_data$Minute)
messi_data$Minute <- gsub("^120\\+.*", "120.5", messi_data$Minute)
messi_data$Minute <- as.numeric(messi_data$Minute)
p <- ggplot(messi_data, aes(x = Minute)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Density of Goals per Minute",
x = "Minute of the Game",
y = "Density")
} else if (input$plotType == "goals_per_opponent") {
# Aggregate data
opponent_data <- messi_data %>%
group_by(Opponent) %>%
summarise(Goals = n(), .groups = 'drop') %>%
arrange(desc(Goals))
# Plot all data but focus initially on the first 15
p <- ggplot(opponent_data, aes(x = reorder(Opponent, -Goals), y = Goals, fill = Opponent)) +
geom_bar(stat = "identity") +
labs(title = "Goals per Opponent", x = "Opponent", y = "Number of Goals") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none") +  # Remove the legend
coord_cartesian(xlim = c(1, 15), clip = "off")  # Limit view to first 15 but allow panning
# Make the plot interactive with Plotly
p <- ggplotly(p, tooltip = "y")
} else if (input$plotType == "goals_assist") {
# Prepare data: Count assists and sort by frequency
assist_data <- messi_data %>%
filter(!is.na(Goal_assist)) %>%
group_by(Goal_assist) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
# Create the plot without a legend and allowing panning
p <- ggplot(assist_data, aes(x = reorder(Goal_assist, -Count), y = Count, fill = Goal_assist)) +
geom_bar(stat = "identity") +
labs(title = "Goals Assist", x = "Number of Assists", y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none") +
coord_cartesian(xlim = c(1, 15), clip = "off")  # Limit view to first 15 but allow panning
# Make the plot interactive with Plotly
p <- ggplotly(p, tooltip = "y")
} else if (input$plotType == "goals_position") {
# Calculate the count of goals scored per playing position
goals_per_position <- messi_data$Playing_Position %>% table()
# Remove NaN values
goals_per_position <- goals_per_position[!is.nan(as.numeric(names(goals_per_position)))]
# Create a pie chart
pie_chart <- plot_ly(labels = names(goals_per_position), values = as.numeric(goals_per_position), type = 'pie',
marker = list(colors = RColorBrewer::brewer.pal(length(goals_per_position), "Set3")),
textinfo = 'percent+label')
return(pie_chart)
} else if (input$plotType == "goals_position_donut") {
# Calculate the count of goals scored per playing position
goals_per_position <- messi_data$Type %>% table()
# Remove NaN values
goals_per_position <- goals_per_position[!is.nan(as.numeric(names(goals_per_position))) &
names(goals_per_position) != "" &
as.numeric(goals_per_position) != 0]
# Create a donut chart
donut_chart <- plot_ly(labels = names(goals_per_position), values = as.numeric(goals_per_position), type = 'pie',
marker = list(colors = RColorBrewer::brewer.pal(length(goals_per_position), "Set3")),
hole = 0.6,
textinfo = 'percent+label')
return(donut_chart)
}
return(p)
}
library(shiny); runApp('project.R')
library(shiny); runApp('project.R')
